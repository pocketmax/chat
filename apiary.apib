FORMAT: X-1A
HOST: http://bla.com

# muh stuff
Gist Fox API is a **pastes service** similar to (GitHub's Gist)[http://gist.github.com]

##Allowed HTTPs requests:

- `POST` - Creates or updates a resource
- `PUT` - Updates a resource
- `GET` - Retrieves a resource or list of resources
- `DELETE` - Delete a resource

##Typical Server Responses

- 200 `OK` - The request was successful (some API calls may return 201 instead).
- 201 `Created` - The request was successful and a resource was created.
- 204 `No Content` - The request was successful but there is no representation to return (that is, the response is empty).
- 400 `Bad Request` - The request could not be understood or was missing required parameters.
- 401 `Unauthorized` - Authentication failed or user does not have permissions for the requested operation.
- 403 `Forbidden` - Access denied.
- 404 `Not Found` - Resource was not found.
- 405 `Method Not Allowed` - Requested method is not supported for the specified resource.
- 429 `Too Many Requests` - Exceeded GoodData API limits. Pause requests, wait one minute, and try again. 
- 503 `Service Unavailable` - The service is temporary unavailable (e.g. scheduled Platform Maintenance). Try again later.

# Group addressbook

# GET /addressbook/contacts/{ids}
gets a single contact

+ Response 200 (application/hal+json)

+ request get a specific contact (application/hal+json)

+ Parameters
    + ids (required, string, `123,456`) ... contact ID
    
+ Response 200 (application/hal+json)

# contacts [/addressbook/contacts/]
handle contacts

## query contacts [PUT]
+ Response 200 (application/hal+json)

+ request query for contacts (application/hal+json)

        {
            "fields": {
                "firstName": "foo",
                "lastName": "bar",
                "title": "ceo"
            },
            "order": {
                "sortBy": "firstName ASC"
            }
            
        }
+ Response 200 (application/hal+json)

        {
            "id": "123456"
        }
        
## Create a single contact [POST]

+ Response 200 (application/hal+json)

+ request create a person (application/hal+json)

        {
            "firstName": "foo",
            "lastName": "bar",
            "title": "ceo"
        }
+ Response 200 (application/hal+json)

        {
            "id": "123456"
        }
+ request create a company (application/hal+json)

        {
            "companyName": "foobar inc"
        }
+ Response 200 (application/hal+json)

        {
            "id": "123456"
        }
+ request create a person/company combo and return multiple IDs (application/hal+json)

        {
            "firstName": "foo",
            "lastName": "bar",
            "companyName": "foobar inc"
        }
+ Response 200 (application/hal+json)

        {
            "data": [{
                "id": "123456"
            },{
                "id": "453445"
            }]
        }

+ request create an assistant assoc (application/hal+json)

        {
            "firstName": "foo",
            "lastName": "bar",
            "title": "assistant",
            "assists": [123,456]  //contact ids of people they assist
        }
+ Response 200 (application/hal+json)

        {
            "data": [{
                "id": "123456"
            },{
                "id": "453445"
            }]
        }
        
## Update a single contact [PATCH]
+ Response 200 (application/hal+json)

## Delete a single contact [DELETE]
+ Response 200 (application/hal+json)

# street addresses [/addressbook/streetaddresses]
handle street addresses

## Search all street addresses [GET]
+ Response 200 (application/hal+json)

## Update a single street addresses [PATCH]
+ Response 200 (application/hal+json)

## Delete a single street addresses [DELETE]
+ Response 200 (application/hal+json)

# departments [/addressbook/departments/]
handle departments for company contacts

## query department [PUT]
+ Response 200 (application/hal+json)

+ request query for department (application/hal+json)

        {
            "departmentId": 123
        }
+ Response 200 (application/hal+json)

        {
            "id": "123456"
        }

# bulk import contacts [/addressbook/import]
import contacts in bulk

## Upload dataset of new contacts [POST]
+ Response 200 (application/hal+json)

## Delete multiple contacts [DELETE]
+ Response 200 (application/hal+json)

# export contacts [/addressbook/export]
export contacts

## pass in query object [POST]
+ Response 200 (application/hal+json)

# Group planning

# projects [/planning/projects]
handle projects

## Search all projects [GET]
+ Response 200 (application/hal+json)

## Create a single project [POST]
+ Response 200 (application/hal+json)

## Update a single project [PATCH]
+ Response 200 (application/hal+json)

## Delete a single project [DELETE]
+ Response 200 (application/hal+json)

# milestones [/planning/milestones]
handle milestones

## Search all milestones [GET]
+ Response 200 (application/hal+json)

## Create a single milestone [POST]
+ Response 200 (application/hal+json)

## Update a single milestone [PATCH]
+ Response 200 (application/hal+json)

## Delete a single milestone [DELETE]
+ Response 200 (application/hal+json)

# tasks [/planning/tasks]
handle tasks

## Search all tasks [GET]
+ Response 200 (application/hal+json)

## Create a single task [POST]
+ Response 200 (application/hal+json)

## Update a single task [PATCH]
+ Response 200 (application/hal+json)

## Delete a single task [DELETE]
+ Response 200 (application/hal+json)

# taskentries [/planning/tasksentries]
handle taskentries

## Search all taskentries [GET]
+ Response 200 (application/hal+json)

## Create a single taskentry [POST]
+ Response 200 (application/hal+json)

## Update a single taskentry [PATCH]
+ Response 200 (application/hal+json)

## Delete a single taskentry [DELETE]
+ Response 200 (application/hal+json)

# Group access

# users [/access/users]
handle users

## Search all users [GET]
+ Response 200 (application/hal+json)

## Create a single user [POST]
+ Response 200 (application/hal+json)

## Update a single user [PATCH]
+ Response 200 (application/hal+json)

## Delete a single user [DELETE]
+ Response 200 (application/hal+json)

# usergroups [/access/usergroups]
handle usergroups

## Search all usergroups [GET]
+ Response 200 (application/hal+json)

## Create a single usergroup [POST]
+ Response 200 (application/hal+json)

## Update a single usergroup [PATCH]
+ Response 200 (application/hal+json)

## Delete a single usergroup [DELETE]
+ Response 200 (application/hal+json)

# accounts [/access/accounts]
handle accounts

## Search all accounts [GET]
+ Response 200 (application/hal+json)

## Create a single account [POST]
+ Response 200 (application/hal+json)

## Update a single account [PATCH]
+ Response 200 (application/hal+json)

## Delete a single account [DELETE]
+ Response 200 (application/hal+json)

# authenticate [/access/authenticate]

## pass username/password to login to the system [POST]
+ Response 200 (application/hal+json)

## pass an auth token to logoff the system [DELETE]
+ Response 200 (application/hal+json)

# authorize [/access/authorize]

## pass subject/object to check if user has access to that object [POST]
+ Response 200 (application/hal+json)

