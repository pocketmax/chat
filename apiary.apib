FORMAT: 1A
HOST: http://bla.com

# muh stuff
Gist Fox API is a **pastes service** similar to (GitHub's Gist)[http://gist.github.com]

##Allowed HTTPs requests:

- `POST` - Creates or updates a resource
- `PUT` - Updates a resource
- `GET` - Retrieves a resource or list of resources
- `DELETE` - Delete a resource

##Typical Server Responses

- 200 `OK` - The request was successful (some API calls may return 201 instead).
- 201 `Created` - The request was successful and a resource was created.
- 204 `No Content` - The request was successful but there is no representation to return (that is, the response is empty).
- 400 `Bad Request` - The request could not be understood or was missing required parameters.
- 401 `Unauthorized` - Authentication failed or user does not have permissions for the requested operation.
- 403 `Forbidden` - Access denied.
- 404 `Not Found` - Resource was not found.
- 405 `Method Not Allowed` - Requested method is not supported for the specified resource.
- 429 `Too Many Requests` - Exceeded GoodData API limits. Pause requests, wait one minute, and try again. 
- 503 `Service Unavailable` - The service is temporary unavailable (e.g. scheduled Platform Maintenance). Try again later.

# Group addressbook

# search contacts [/addressbook/contacts/{&groupBy}{&sortBy}{&limit}{&pageNum}]
search contacts

## Search all contacts [GET]
###SHOW ME EVERYONE WHO LIVES AT A CERTAIN ADDRESS
streetAddresses.type=home,
streetAddresses.id=123456

###SHOW ME EVERYONE WHO IS PART OF A CERTAIN COMPANY
parent.contactId=123456

###SHOW ME EVERYONE WHO IS AN AGENT OF A CERTAIN COMPANY
parent.contactId=123324
contact.type=agent
###SHOW ME EVERYONE WHO IS AN AGENT OR AN ASSISTANT OF A CERTAIN COMPANY
parent.contactId=123324
contact.type=agent,assistant
groupBy
lastName
where
lastName = “anderson”
lastName = “*anderson"
sortBy
lastName DESC,
firstName ASC,

+ Response 200 (application/hal+json)

+ request get a specific contact (application/hal+json)

+ Parameters
    + groupBy (optional, string, `field1,field2`) ... list of fields to group by
    + sortBy (optional, string, `field1`) ... field to sort by
    + pageNum (optional, string, `3`) ... page number if limit is specified
    + limit (optional, number, `100`) ... limit number of results

+ Response 200 (application/hal+json)

# contacts [/addressbook/contacts/]
handle contacts

## query contacts [PUT]
+ Response 200 (application/hal+json)

+ request query for contacts (application/hal+json)

        {
            "fields": {
                "firstName": "foo",
                "lastName": "bar",
                "title": "ceo"
            },
            "order": {
                "sortBy": "firstName ASC"
            }
            
        }

+ Response 200 (application/hal+json)

        {
            "id": "123456"
        }
        
## Create a single contact [POST]

+ Response 200 (application/hal+json)

+ request create a person (application/hal+json)

        {
            "firstName": "foo",
            "lastName": "bar",
            "title": "ceo"
        }
+ Response 200 (application/hal+json)

        {
            "data": {
                "id": "123456",
                "links": {
                    "delete": "/addressbook/contacts/123456",
                    "assoc": {
                        "contacts": {
                            "assists": {
                                "345454": "/addressbook/contacts/345454",
                                "543443": "/addressbook/contacts/543443"
                            }
                        }
                        "orgunits": {
                            "offices": {
                                "453444": "/addressbook/orgunits/453444"
                            },
                            "departments": {
                                "453454": "/addressbook/orgunits/453454"
                            }
                        }
                    }
                    "to": "/task/23234"
                }
            },
            "results": {
                "respTimeMs": "12"
            }
        }
+ request create a company (application/hal+json)

        {
            "companyName": "foobar inc"
        }
+ Response 200 (application/hal+json)

        {
            "id": "123456"
        }
+ request create a person/company combo and return multiple IDs (application/hal+json)

        {
            "firstName": "foo",
            "lastName": "bar",
            "companyName": "foobar inc"
        }
+ Response 200 (application/hal+json)

        {
            "data": [{
                "id": "123456"
            },{
                "id": "453445"
            }]
        }

+ request create an assistant assoc (application/hal+json)

        {
            "firstName": "foo",
            "lastName": "bar",
            "title": "assistant",
            "assists": [123,456]  //contact ids of people they assist
        }
+ Response 200 (application/hal+json)

        {
            "data": [{
                "id": "123456"
            },{
                "id": "453445"
            }]
        }
        
## Update a single contact [PATCH]
+ Response 200 (application/hal+json)

## Delete a single contact [DELETE]
+ Response 200 (application/hal+json)

# street addresses [/addressbook/streetaddresses]
handle street addresses

## Search all street addresses [GET]
+ Response 200 (application/hal+json)

## Update a single street addresses [PATCH]
+ Response 200 (application/hal+json)

## Delete a single street addresses [DELETE]
+ Response 200 (application/hal+json)

# bulk import contacts [/addressbook/import]
import contacts in bulk

## Upload dataset of new contacts [POST]
+ Response 200 (application/hal+json)

## Delete multiple contacts [DELETE]
+ Response 200 (application/hal+json)

# export contacts [/addressbook/export]
export contacts

## pass in query object [POST]
+ Response 200 (application/hal+json)

# Group planning

# projects [/planning/projects]
handle projects

## Search all projects [GET]
+ Response 200 (application/hal+json)

## Create a single project [POST]
+ Response 200 (application/hal+json)

## Update a single project [PATCH]
+ Response 200 (application/hal+json)

## Delete a single project [DELETE]
+ Response 200 (application/hal+json)

# milestones [/planning/milestones]
handle milestones

## Search all milestones [GET]
+ Response 200 (application/hal+json)

## Create a single milestone [POST]
+ Response 200 (application/hal+json)

## Update a single milestone [PATCH]
+ Response 200 (application/hal+json)

## Delete a single milestone [DELETE]
+ Response 200 (application/hal+json)

# tasks [/planning/tasks]
handle tasks

## Search all tasks [GET]
+ Response 200 (application/hal+json)

## Create a single task [POST]
+ Response 200 (application/hal+json)

## Update a single task [PATCH]
+ Response 200 (application/hal+json)

## Delete a single task [DELETE]
+ Response 200 (application/hal+json)

# taskentries [/planning/tasksentries]
handle taskentries

## Search all taskentries [GET]
+ Response 200 (application/hal+json)

## Create a single taskentry [POST]
+ Response 200 (application/hal+json)

## Update a single taskentry [PATCH]
+ Response 200 (application/hal+json)

## Delete a single taskentry [DELETE]
+ Response 200 (application/hal+json)

# Group access

# users [/access/users]
handle users

## Search all users [GET]
+ Response 200 (application/hal+json)

## Create a single user [POST]
+ Response 200 (application/hal+json)

## Update a single user [PATCH]
+ Response 200 (application/hal+json)

## Delete a single user [DELETE]
+ Response 200 (application/hal+json)

# usergroups [/access/usergroups]
handle usergroups

## Search all usergroups [GET]
+ Response 200 (application/hal+json)

## Create a single usergroup [POST]
+ Response 200 (application/hal+json)

## Update a single usergroup [PATCH]
+ Response 200 (application/hal+json)

## Delete a single usergroup [DELETE]
+ Response 200 (application/hal+json)

# accounts [/access/accounts]
handle accounts

## Search all accounts [GET]
+ Response 200 (application/hal+json)

## Create a single account [POST]
+ Response 200 (application/hal+json)

## Update a single account [PATCH]
+ Response 200 (application/hal+json)

## Delete a single account [DELETE]
+ Response 200 (application/hal+json)

# authenticate [/access/authenticate/]

## pass username/password to login to the system [POST]
+ Response 200 (application/hal+json)

## pass an auth token to logoff the system [DELETE]
+ Response 200 (application/hal+json)

# authorize [/access/authorize/{shortName}/{id}]

## pass subject/object to check if user has access to that object [POST]

+ Response 200 (application/hal+json)

## check if a user has access to an object and visa versa [GET]

+ request get all user permissions to a specific object (application/hal+json)

+ Parameters
    + shortName (required, string, `user,usergroup,project,task`) ... shortName of item
    + id (required, string, `234234`) ... id of object to check access to
    
+ Response 200 (application/hal+json)

        {
            "data": {
                "inherittedRights": {
                    "users": {
                        "12343": {
                            "read": true
                        },
                        "453434": {
                            "userGroups: {
                                "111111": {
                                    "read": true
                                }
                            }
                        }
                    }
                },
                "effectiveRights": {
                    "users": {
                        "234234": {
                            "read": true
                        }
                    },
                    "userGroups": {
                        "233333": {
                            "read": true
                        }
                    }
                }
            }
        }


## users [/accesssdf/users]
bla 123

## Search users [GET]

+ Response 200 (application/hal+json)
    + Headers
    + Body
    
            {}

## Create user [POST]

+ Response 200 (application/hal+json)
    + Headers
    + Body
    
            {}

## Update user [PATCH]

+ Response 200 (application/hal+json)
    + Headers
    + Body
    
            {}


## Delete user [DELETE]

+ Response 200 (application/hal+json)
    + Headers
    + Body
    
            {}

## users [/access/]
bla 123

## Search users [GET]

+ Response 200 (application/hal+json)
    + Headers
    + Body
    
            {}

## Create user [POST]

+ Response 200 (application/hal+json)
    + Headers
    + Body
    
            {}

## Update user [PATCH]

+ Response 200 (application/hal+json)
    + Headers
    + Body
    
            {}


## Delete user [DELETE]

+ Response 200 (application/hal+json)
    + Headers
    + Body
    
            {}

## fetch a single account [/accounts/{id}]
Gist Fox API entry point.

This resource does not have any attributes. Instead it offers the initial API affordances in the form of the HTTP Link header and HAL links.
The Gist resource has the following attributes:

+ Parameters

    + id (string) ... ID of the gist in the form of a hash

## Retrieve Entry Point [GET]

+ Response 200 (application/hal+json)
    + Headers
    
            Link: <http:/api.gistfox.com/>;rel="self",<http:/api.gistfox.com/gists>;rel="gists"

    + Body

            {
                "_links": {
                    "self": { "href": "/" },
                    "gists": { "href": "/gists?{since}", "templated": true }
                }
            }
            
# Group Gist 123
Gist-related resources of *Gist Fox API*.

## Gist [/gists/{id}]
A single Gist object. The Gist resource is the central resource in the Gist Fox API. It represents one paste - a single text note.

The Gist resource has the following attributes:

- id
- created_at
- description
- content

The states *id* and *created_at* are assigned by the Gist Fox API at the moment of creation.


+ Parameters
    + id (string) ... ID of the Gist in the form of a hash.

+ Model (application/hal+json)

    HAL+JSON representation of Gist Resource. In addition to representing its state in the JSON form it offers affordances in the form of the HTTP Link header and HAL links.

    + Headers

            Link: <http:/api.gistfox.com/gists/42>;rel="self", <http:/api.gistfox.com/gists/42/star>;rel="star"

    + Body

            {
                "_links": {
                    "self": { "href": "/gists/42" },
                    "star": { "href": "/gists/42/star" },
                },
                "id": "42",
                "created_at": "2014-04-14T02:15:15Z",
                "description": "Description of Gist",
                "content": "String contents"
            }

### Retrieve a Single Gist [GET]
+ Response 200

    [Gist][]
    
### Edit a Gist [PATCH]
To update a Gist send a JSON with updated value for one or more of the Gist resource attributes. All attributes values (states) from the previous version of this Gist are carried over by default if not included in the hash.

+ Request (application/json)

        {
            "content": "Updated file contents"
        }

+ Response 200

    [Gist][]

### Delete a Gist [DELETE]
+ Response 204

## Gists Collection [/gists{?since}]
Collection of all Gists.

The Gist Collection resource has the following attribute:

- total

In addition it **embeds** *Gist Resources* in the Gist Fox API.


+ Model (application/hal+json)

    HAL+JSON representation of Gist Collection Resource. The Gist resources in collections are embedded. Note the embedded Gists resource are incomplete representations of the Gist in question. Use the respective Gist link to retrieve its full representation.

    + Headers

            Link: <http:/api.gistfox.com/gists>;rel="self"

    + Body

            {
                "_links": {
                    "self": { "href": "/gists" }
                },
                "_embedded": {
                    "gists": [
                        {
                            "_links" : {
                                "self": { "href": "/gists/42" }
                            },
                            "id": "42",
                            "created_at": "2014-04-14T02:15:15Z",
                            "description": "Description of Gist"
                        }
                    ]
                },
                "total": 1
            }

### List All Gists [GET]
+ Parameters
    + since (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Only Gists updated at or after this time are returned.

+ Response 200

    [Gists Collection][]

### Create a Gist [POST]
To create a new Gist simply provide a JSON hash of the *description* and *content* attributes for the new Gist.

+ Request (application/json)

        {
            "description": "Description of Gist",
            "content": "String content"
        }

+ Response 201

    [Gist][]

## Star [/gists/{id}/star]
Star resource represents a Gist starred status.

The Star resource has the following attribute:

- starred


+ Parameters

    + id (string) ... ID of the gist in the form of a hash

+ Model (application/hal+json)

    HAL+JSON representation of Star Resource.

    + Headers

            Link: <http:/api.gistfox.com/gists/42/star>;rel="self"

    + Body

            {
                "_links": {
                    "self": { "href": "/gists/42/star" },
                },
                "starred": true
            }

### Star a Gist [PUT]
+ Response 204

### Unstar a Gist [DELETE]
+ Response 204

### Check if a Gist is Starred [GET]
+ Response 200

    [Star][]