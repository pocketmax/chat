FORMAT: 1A
HOST: http://bla.com

# muh stuff
Gist Fox API is a **pastes service** similar to (GitHub's Gist)[http://gist.github.com]

##Allowed HTTPs requests:

- `POST` - Creates or updates a resource
- `PUT` - Updates a resource
- `GET` - Retrieves a resource or list of resources
- `DELETE` - Delete a resource

##Typical Server Responses

- 200 `OK` - The request was successful (some API calls may return 201 instead).
- 201 `Created` - The request was successful and a resource was created.
- 204 `No Content` - The request was successful but there is no representation to return (that is, the response is empty).
- 400 `Bad Request` - The request could not be understood or was missing required parameters.
- 401 `Unauthorized` - Authentication failed or user does not have permissions for the requested operation.
- 403 `Forbidden` - Access denied.
- 404 `Not Found` - Resource was not found.
- 405 `Method Not Allowed` - Requested method is not supported for the specified resource.
- 429 `Too Many Requests` - Exceeded GoodData API limits. Pause requests, wait one minute, and try again. 
- 503 `Service Unavailable` - The service is temporary unavailable (e.g. scheduled Platform Maintenance). Try again later.

# Group general

each response should be in this format
```js
{
    "data":{
        "FIELD": "VALUE",
        "_customFields": {
            "FIELD": "VALUE"
        },
        "_links": {
            "actions": {
                "delete": "/v1/addressbook/contacts/ggggggg"
            },
            "assoc": {      //when making assoc create/update changes, only display that change in the results
                "contacts": {
                    "ASSOCIATION": {
                        "1111111": "/v1/addressbook/contacts/111111"
                    }
                },
                "orgunits": {
                    "ASSOCIATION": {
                        "aaaaaa": "/v1/addressbook/orgunits/aaaaaa"
                    }
                }
            }
        }
    },
    "pageInfo": {               //only used if paginated results are applied
        "currentItemCount": 4,  //current items desplayed on the page
        "pageIndex": 4,         //current page
        "pageCount": 10,       //total number of pages in the result set
        "itemsPerPage": 10      //total number of items per page
        "startIndex": 1,        //the index of the first item in the current paged results
        "itemCount": 100       //total number of items in the entire results set
        "_links": {
            "next": "/v1/addressbook/contacts/",
            "current": "/v1/addressbook/contacts/",
            "previous": "/v1/addressbook/contacts/"
        }
    },
    "success": true,
    "results": {
        "respTimeMs": 23
    },
    "error": {
        "message": "basdf",
        "code": 123,
        "errors": [{
            "domain": "string",
            "reason": "",
            "message": "",
            "location": "",
            "locationType": "",
            "extendedHelp": "",
            "sendReport": ""
        }]
    }
}
```

# Group addressbook

# search contacts [/v1/addressbook/contacts/{&groupBy}{&sortBy}{&limit}{&pageNum}]
search contacts

## Search all contacts [GET]
###SHOW ME EVERYONE WHO LIVES AT A CERTAIN ADDRESS
streetAddresses.type=home,
streetAddresses.id=123456

###SHOW ME EVERYONE WHO IS PART OF A CERTAIN COMPANY
parent.contactId=123456

###SHOW ME EVERYONE WHO IS AN AGENT OF A CERTAIN COMPANY
parent.contactId=123324
contact.type=agent
###SHOW ME EVERYONE WHO IS AN AGENT OR AN ASSISTANT OF A CERTAIN COMPANY
parent.contactId=123324
contact.type=agent,assistant
groupBy
lastName
where
lastName = “anderson”
lastName = “*anderson"
sortBy
lastName DESC,
firstName ASC,

+ Response 200 (application/json)

+ request get a specific contact (application/json)

+ Parameters
    + groupBy (optional, string, `field1,field2`) ... list of fields to group by
    + sortBy (optional, string, `field1`) ... field to sort by
    + pageNum (optional, string, `3`) ... page number if limit is specified
    + limit (optional, number, `100`) ... limit number of results

+ Response 200 (application/json)

# contacts [/v1/addressbook/contacts/]
handle contacts

## Create a single contact [POST]

+ request create a person (application/json)

        {
            "firstName": "Bart",
            "lastName": "Simpson",
            "title": "Student"
        }
+ Response 200 (application/json)

        {
            "data": {
                "id": "123456",
                "firstName": "Bart",
                "lastName": "Simpson",
                "title": "Student",
                "_links": {
                    "actions": {
                        "delete": "/addressbook/contacts/123456"
                    }
                }
            },
            "success": true,
            "results": {
                "respTimeMs": 12
            }
        }
+ request create a company (application/json)

        {
            "companyName": "foobar inc"
        }
+ Response 200 (application/json)

        {
            "data": {
                "id": "123456",
                "companyName": "foobar inc",
                "links": {
                    "actions": {
                        "delete": "/v1/addressbook/contacts/123456"
                    }
                }
            },
            "success": true,
            "results": {
                "respTimeMs": 12
            }
        }
+ request create an assistant assoc (application/json)

        {
            "firstName": "Money",
            "lastName": "Penny",
            "title": "assistant",
            "assists": ["aaaaaaaa"]
        }
+ Response 200 (application/json)

        {
            "data": {
                "id": "123456",
                "firstName": "Money",
                "lastName": "Penny",
                "title": "assistant",
                "links": {
                    "actions": {
                    },
                    "assoc": {
                        "contacts": {
                            "assists": {
                                "aaaaaaaa": "/v1/addressbook/contacts/aaaaaaaaa"
                            }
                        }
                    }
                }
            },
            "success": true,
            "results": {
                "respTimeMs": 12
            }
        }
+ request create an assistant assoc with an assoc override (application/json)

        {
            "firstName": "Money",
            "lastName": "Penny",
            "title": "admin assistant",
            "assists": {
                "aaaaaaaa": {
                    "title": "assistant"
                }
            }
        }
+ Response 200 (application/json)

        {
            "data": {
                "id": "123456",
                "firstName": "Money",
                "lastName": "Penny",
                "title": "assistant",
                "links": {
                    "assoc": {
                        "contacts": {
                            "assists": {
                                "aaaaaaaa": "/v1/addressbook/contacts/aaaaaaaaa"
                            }
                        }
                    }
                }

            },
            "success": true,
            "results": {
                "respTimeMs": 12,
            }
        }

+ request create an employee assoc to a company with an extension (application/json)

        {
            "firstName": "James",
            "lastName": "Bond",
            "title": "admin assistant",
            "worksat": {
                "bbbbbbbb": {
                    "phoneExt": 453
                }
            }
        }
+ Response 200 (application/json)

        {
            "data": {
                "id": "123456",
                "firstName": "James",
                "lastName": "Bond",
                "title": "admin assistant",
                "_links": {
                    "assoc": {
                        "contacts": {
                            "worksat": {
                                "bbbbbbbb": {
                                    "phoneExt": 453
                                }
                            }
                        }
                    }
                }
            },
            success: true,
            "results": {
                "respTimeMs": 12
            }
        }
        
## Update a single contact [PATCH]
+ Response 200 (application/json)

## Delete a single contact [DELETE]
+ Response 200 (application/json)

## query contacts [PUT]

+ request query for contacts (application/json)

        {
            "fields": {
                "firstName": "foo",
                "lastName": "bar",
                "title": "ceo"
            },
            "order": {
                "sortBy": "firstName ASC"
            }
            
        }

+ Response 200 (application/json)

        {
            "id": "123456"
        }
        

# street addresses [/v1/addressbook/streetaddresses]
handle street addresses

## Search all street addresses [GET]
+ Response 200 (application/json)

## Update a single street addresses [PATCH]
+ Response 200 (application/json)

## Delete a single street addresses [DELETE]
+ Response 200 (application/json)

# street addresses [/v1/addressbook/orgunits]
handle org units i.e. departments

## Update a single orgunit [PATCH]
+ Response 200 (application/json)

## Delete a single orgunit [DELETE]
+ Response 200 (application/json)

# bulk import contacts [/v1/addressbook/import]
import contacts in bulk

## Upload dataset of new contacts [POST]
+ Response 200 (application/json)

## Delete multiple contacts [DELETE]
+ Response 200 (application/json)

# Group planning

# projects [/v1/planning/projects]
handle projects

## Search all projects [GET]
+ Response 200 (application/json)

## Create a single project [POST]
+ Response 200 (application/json)

## Update a single project [PATCH]
+ Response 200 (application/json)

## Delete a single project [DELETE]
+ Response 200 (application/json)

# milestones [/v1/planning/milestones]
handle milestones

## Search all milestones [GET]
+ Response 200 (application/json)

## Create a single milestone [POST]
+ Response 200 (application/json)

## Update a single milestone [PATCH]
+ Response 200 (application/json)

## Delete a single milestone [DELETE]
+ Response 200 (application/json)

# tasks [/v1/planning/tasks]
handle tasks

## Search all tasks [GET]
+ Response 200 (application/json)

## Create a single task [POST]
+ Response 200 (application/json)

## Update a single task [PATCH]
+ Response 200 (application/json)

## Delete a single task [DELETE]
+ Response 200 (application/json)

# taskentries [/v1/planning/tasksentries]
handle taskentries

## Search all taskentries [GET]
+ Response 200 (application/json)

## Create a single taskentry [POST]
+ Response 200 (application/json)

## Update a single taskentry [PATCH]
+ Response 200 (application/json)

## Delete a single taskentry [DELETE]
+ Response 200 (application/json)

# Group access

# users [/v1/access/users]
handle users

## Search all users [GET]
+ Response 200 (application/json)

## Create a single user [POST]
+ Response 200 (application/json)

## Update a single user [PATCH]
+ Response 200 (application/json)

## Delete a single user [DELETE]
+ Response 200 (application/json)

# usergroups [/access/usergroups]
handle usergroups

## Search all usergroups [GET]
+ Response 200 (application/json)

## Create a single usergroup [POST]
+ Response 200 (application/json)

## Update a single usergroup [PATCH]
+ Response 200 (application/json)

## Delete a single usergroup [DELETE]
+ Response 200 (application/json)

# accounts [/v1/access/accounts]
handle accounts

## Search all accounts [GET]
+ Response 200 (application/json)

## Create a single account [POST]
+ Response 200 (application/json)

## Update a single account [PATCH]
+ Response 200 (application/json)

## Delete a single account [DELETE]
+ Response 200 (application/json)

# authenticate [/v1/access/authenticate/]

## pass username/password to login to the system [POST]
+ Response 200 (application/json)

## pass an auth token to logoff the system [DELETE]
+ Response 200 (application/json)

# authorize [/v1/access/authorize/{shortName}/{id}]

## pass subject/object to check if user has access to that object [POST]

+ Response 200 (application/json)

## check if a user has access to an object and visa versa [GET]

+ request get all user permissions to a specific object (application/json)

+ Parameters
    + shortName (required, string, `user,usergroup,project,task`) ... shortName of item
    + id (required, string, `234234`) ... id of object to check access to
    
+ Response 200 (application/json)

        {
            "data": {
                "inherittedRights": {
                    "users": {
                        "12343": {
                            "read": true
                        },
                        "453434": {
                            "userGroups: {
                                "111111": {
                                    "read": true
                                }
                            }
                        }
                    }
                },
                "effectiveRights": {
                    "users": {
                        "234234": {
                            "read": true
                        }
                    },
                    "userGroups": {
                        "233333": {
                            "read": true
                        }
                    }
                }
            }
        }
